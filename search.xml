<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo+Next+Github搭建个人博客过程记录]]></title>
    <url>%2F2019%2F04%2Fset-up-hexo%2F</url>
    <content type="text"><![CDATA[初次尝试使用Hexo搭建个人博客，记录下全过程，以供参考。 环境准备Windows 10node-v10.15.2-x64git version 2.15.1.windows.2hexo 3.8.0 安装 Node.jsHexo安装需要依赖Node.js环境，打开 Node.js官网 ： 点击箭头所指按钮进行下载，我使用的是 node-v10.15.2-x64.msi版本，具体安装过程相信你一定能自己完成。安装完成后，打开CMD，输入 node -v，若输出以下类似信息，则表示安装成功。&gt; node -vv10.15.2 （可选）使用淘宝 NPM 镜像国内访问 NPM 源速度比较慢，可以使用淘宝 NPM 镜像源进行替换。在 CMD 中输入以下指令：&gt; npm install -g cnpm --registry=https://registry.npm.taobao.org 替换为淘宝 NPM 镜像源后，使用 cnpm 指令代替 npm 指令以下均使用 cnpm 指令进行安装 安装 Git我们需要使用 Git 来安装 Hexo，主题文件以及提交文章到Github。打开 Git 官网，选择适合系统的版本后下载。这里我使用的是 Git-2.15.1-64-bit.exe，具体安装过程相信你一定能自己完成。安装完成后，打开CMD，输入 git version，若输出以下类似信息，则表示安装成功。&gt; git versiongit version 2.15.1.windows.2 安装 Hexo在 CMD 中输入以下指令安装：&gt; cnpm install hexo -g 安装完成之后，输入 hexo -v ，若输出以下类似信息，则表示安装成功。&gt; hexo -vhexo-cli: 1.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 10.15.2...（部分省略） 完成以上程序的安装即可开始使用 Hexo 创建博客啦。 使用 Hexo 搭建博客博客初始化在资源管理器中任意位置创建一个文件夹，用于存在博客。例如，我在 E 盘创建了一个 blog 的文件夹，我们将该文件夹称为 站点根目录。进入创建的文件夹后，右键空白处，点击 Git Bash Here。在 Git Bash 中输入：$ hexo initINFO Cloning hexo-starter to E:\blogCloning into &apos;E:\blog&apos;.........Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;Cloning into &apos;E:/blog/themes/landscape&apos;.........INFO Start blogging with Hexo! 看到 INFO Start blogging with Hexo! 则表示初始化成功。 接下来安装 Hexo 需要的依赖文件，在 Git Bash 中输入：$ cnpm install 安装完成后，接着启动本地服务器：$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. hexo 默认使用 4000 端口，若 4000 端口被占用，使用 -p 参数指定端口号，例如指定使用 4001 端口：$ hexo s -p 4001 启动成功后，可以打开浏览器，在地址栏输入 http://localhost:4000，就可以看到我们搭建的博客啦。若想要关闭服务器，在 Git Bash 中使用 Ctrl + C即可。 更换 NexT 主题Hexo 拥有众多主题可供我们选择，可在 Hexo官网 - 主题 进行查看。这里我选择的是 NexT 主题（好早就看到过该主题的博客，今天终于找到了）。NexT Github：https://github.com/theme-next/hexo-theme-nextNexT 使用手册：https://theme-next.org/docs/getting-started/ 下载那么下面开始安装 NexT 主题。在 Git Bash 中输入：$ git clone https://github.com/theme-next/hexo-theme-next themes/next 启用 NexT在 站点根目录 下找到 _config.yml 文件，我们称其为 站点配置文件。使用任意编辑器打开该文件，找到 theme，将默认的 landscape 改为 next。# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 接着使用 hexo s 启动本地服务器，使用浏览器打开 http://localhost:4000，就能看到如下页面： 到此为止，我们已经成功将主题替换为 NexT。 （可选）优化细节NexT 主题默认启动的功能较少，下面将进行部分配置来完善的博客内容。 切换中文在 站点配置文件 中，找到 language 属性，填入 zh-CN 后，重启本地服务器即可。具体需要切换为何种语言，可以在 theme/next/language 下查看主题支持哪些语言。# Sitetitle: Hexosubtitle:description:keywords:author: John Doelanguage: zh-CNtimezone: 以上列出了许多属性，可自行尝试修改。 添加菜单在 theme/next 目录下，找到 _config.yml 文件，我们称之为 主题配置文件，使用编辑器打开该文件，找到 menu 属性：menu: home: / || home #about: /about/ || user categories: /categories/ || th tags: /tags/ || tags archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 需要使用哪个菜单，只要删除前面的 # 即可。这里我们打开 tags 和 categories。 需要注意的是，在 /tags/ || tags 中，/tags 表示网站目录，tags 表示使用的图标，可以在 Font Awesome Icons 选择喜欢的图标，将图标名填写在 || 后即可。另外，只需要改变文件中菜单的上下顺序，即可改变页面上的显示顺序。 重启服务器后即可如下效果： 添加 [标签] 和 [分类] 页面仅仅是打开 tags 和 categories 只会在菜单处显示，但点击后会出现找不到页面的情况，是因为这2个菜单的页面需要我们自己来创建。 添加 标签 页面在 Git Bash 中输入 hexo new page tags 来创建标签页，输入之后可以在 source 目录下看到多了一个 tags 文件夹，里面有一个 index.md 文件，打开并添加：---title: tagsdate: 2019-04-22 19:29:54type: tags--- 若站点内所有文章都未包含标签，则标签页只有一个 title，不包含其他内容。可以按照以下方式给文章添加标签：---title: 文章标题tags: - tag1 - tag2--- 添加 分类 页面在 Git Bash 中输入 hexo new page categories 来创建分类页，输入之后可以在 source 目录下看到多了一个 categories 文件夹，里面有一个 index.md 文件，打开并添加：---title: tagsdate: 2019-04-22 19:29:54type: tags--- 若站点内所有文章都未包含分类，则分类页只有一个 title，不包含其他内容。可以按照以下方式给文章添加分类：---title: 文章标题categories: category1--- 开启文章预览如果未做任何配置，在首页会默认显示全篇文章的内容，为了节约空间和提升体验，下面我们来开启文章预览和阅读全文的功能。 开启方式有两种： 在 主题配置文件 中，找到 auto_excerpt，设置 enable 属性为 true。 auto_excerpt: enable: true length: 150 // 自动摘要长度 这种方式会自动截取文章开头部分，具体截取长度在 length 设置。 使用 &lt;!-- more --&gt; 手动截断内容。 开启访问量统计我们使用 不蒜子 进行访问量的统计。在 主题配置文件 中，找到 busuanzi_count，将 enable 设置为 true 即可。 开启字数统计在 Git Bash 中输入：$ cnpm install hexo-symbols-count-time --save 在 站点配置文件 中添加以下内容：symbols_count_time: symbols: true # 文章字数 time: true # 阅读时长 total_symbols: true # 所有文章总字数 total_time: true # 所有文章阅读中时长 给文章添加版权信息在 主题配置文件 中，找到 creative_commons，添加如下内容：creative_commons: license: by-nc-sa sidebar: true post: true language: 在 站点配置文件中，找到 url，修改为：url: `https://你的Github用户名.github.io/` 文章引入本地图片在 主题配置文件 中，找到 post_asset_folder，设置为 true。在 Git Bash 中，执行以下命令：$ cnpm install hexo-asset-image --save 在 source/_post 中，创建一个和文章同名的文件夹，将图片放在里面，在文章中使用 ![图片说明](/图片名)。例如 ![image](/image.jpg) 添加站内搜索在 Git Bash 中，执行以下命令：$ npm install hexo-generator-searchdb --save 在 站点配置文件中，添加以下内容：search: path: search.xml field: post format: html limit: 10000 在 主题配置文件中，启用搜索：local_search: enable: true 部署到 GithubGithub 官网：https://github.com 初次使用配置以下针对 Github 初次使用者，若已经在使用或者曾经使用过，可直接跳转至 创建仓库 若第一次使用请先到 Github 官网创建账号。创建好之后在 Git Bash 中输入以下命令：$ git config --global user.name &quot;Github 用户名&quot;$ git config --global user.email &quot;Github 邮箱@email.com&quot; 接着继续在 Git Bash 中输入：$ ssh-keygen -t rsa -C &quot;Github 邮箱&quot; 输入之后，一路 回车(Enter)就行了。密钥生成之后，公钥存放在 C:/Users/你的Windows用户名/.ssh/id_rsa.pub，打开这个文件后，复制其中的内容，进入 Github 中的 Settings，将复制的内容粘贴到下图的位置即可。 创建仓库创建一个仓库，仓库名必须为 你的用户名.github.io，例如我创建的仓库名是 EtyMx.github.io。 部署站点创建好仓库之后，找到 Git 提交地址并复制： 打开 站点配置文件, 找到 deploy，将复制的 Git 提交地址参考以下内容粘贴到指定位置：deploy: type: git repository: git@github.com:EtyMx/EtyMx.github.io.git branch: master 接着再 Git Bash 中，安装 Git 提交插件并将项目部署至 Github：$ cnpm install hexo-deployer-git --save$ hexo d 执行完成后，在浏览器输入 https://你的 Github 用户名.github.io/，就可以看见自己的博客啦。 自定义域名当拥有了自己的域名后，在 DNS 解析配置处，新建 CNAME 类型的解析，指向 你的 Github 用户名.github.io，在 Github 仓库设置处，找到 Github Pages，并在如下位置填写你的域名，并点击 save。 点击 save 之后会在仓库里新增一个 CNAME 文件，内容是刚刚填入的域名，表示 Github 允许从该域名解析到我们部署的站点。在使用 hexo d 部署站点时，CNAME 文件会被删除掉，为了避免每次都重新去配置，我们可以在 站点根目录 下的 source 目录中，手动创建 CNAME 文件，并填写我们的域名。source 目录中的文件在部署时不会被 Hexo 删除 全文完]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
